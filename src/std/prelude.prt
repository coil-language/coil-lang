// Range

// this needs more thought
fn Range(start, end, exclusive?) {
  assert! Number.isInteger(start)
  assert! Number.isInteger(end)
  this.start = start
  this.end = end
  this.exclusive? = truthy(exclusive?)
}

// CONSTRUCT RECORD PROTOCOL

protocol Record

define Record for Map = {
  fn construct(entries) = new Map(entries)
}
define Record for ObjectLiteral = {
  fn construct(entries) = new ObjectLiteral(Object.fromEntries(entries))
}

fn construct_record(entries) = this[Record].construct.call(this, entries)

// CALL PROTOCOL

protocol Call

impl Call for Function = fn(...args) = this(...args)

impl Call for Set = fn(key) = this.has(key)

impl Call for Map = fn(key) = this.get(key)

impl Call for ObjectLiteral = fn(key) = this[key]

impl Call for Array = fn(index) = this.at(index)

impl Call for String = fn(collection) {
  if (typeof(collection) === "string")
  || collection is Keyword {
    // make sure we don't end up in infinite loop  
    return collection[this]
  } else {
    return collection::call(this)
  }
}

impl Call for Number = fn(collection) {
  if collection is Keyword {
    return this[collection]
  } else {
    return collection::call(this)
  }
}

impl Call for Keyword = fn(collection) {
  if (collection is Keyword)
  || typeof(collection) === "string" {
    // again prevent infinite loop
    return collection[this]
  } else {
    return collection::call(this)
  }
}

fn call(...args) = this[Call](...args)

fn pipe(callable) = callable::call(this)

fn compose(f, ...fns) = fn(...args) = 
  fns::reduce(
    fn (result, f) = f::call(result),
    f::call(...args)
  )

fn impl_call_for_bound(f) = f[Call] = fn(first, ...rest) = first::f(...rest)

// EQUAL PROTOCOl

protocol Equal

fn strict_eq?(other) = this === other

impl Equal for Number = strict_eq?

impl Equal for String = strict_eq?

impl Equal for BigInt = strict_eq?

impl Equal for Array = fn(other) {
  if other is not Array {
    return false
  }
  if this.length !== other.length {
    return false
  }
  return this.every(fn(value, index) = value == other[index])
}

impl Equal for Map = fn(other) {
  if other is not Map {
    return false
  }
  if this.size !== other.size {
    return false
  }
  for let [key, value] of this.entries() {
    if other.get(key) != value {
      return false
    }
  }
  return true
}

impl Equal for ObjectLiteral = fn(other) {
  for let [key, value] of Object.entries(this) {
    if value[Equal] != other[key] {
      return false
    }
  }
  return true
}

fn eq?(a, b) = a[Equal](b)

// CLONE PROTOCOL
protocol Clone

impl Clone for Range = {
  fn clone() = new Range(this.start, this.end, this.exclusive?)
  fn deep_clone() = new Range(this.start::clone(), this.end::clone(), this.exclusive?)
}

impl Clone for ObjectLiteral = {
  fn clone() = {...this}
  fn deep_clone() {
    let output = {}
    for let [k, v] of this::entries() {
      output[k] = v::deep_clone()
    }
    return output
  }
}

impl Clone for Array = {
  fn clone() = this.slice()
  fn deep_clone() = this::map(deep_clone)
}

impl Clone for Map = {
  fn clone() = new Map(this)
  fn deep_clone() = this::map(deep_clone)
}

impl Clone for Set = {
  fn clone() = new Set(this)
  fn deep_clone() = this::map(deep_clone)
}

fn clone() = this[Clone].clone.call(this)

fn deep_clone() = this[Clone].deep_clone.call(this)

[clone deep_clone].forEach(impl_call_for_bound)

// IDENTITY PROTOCOL
// this defines the monoid identity for a given type (group)
protocol Identity

impl Identity for Number = 0
impl Identity for String = ""
impl Identity for Array = []
impl Identity for ObjectLiteral = {}
impl Identity for Map = ~Map{}
impl Identity for Set = #{}

fn identity() = this[Identity]


// COLLECTION PROTOCOL
protocol Collection

fn entries() = Object.entries(this)

fn from_entries() = new ObjectLiteral(Object.fromEntries(this))

fn values() = Object.values(this)

impl Collection for ObjectLiteral = {
  fn sample() = this::values()[0]
  fn each(f) = this::entries().forEach(fn ([k, v]) = f(k, v))
  fn find(f) = this::entries().find(fn ([k, v]) = f(k, v)::pipe(truthy))
  fn map(f) = this::entries().map(fn ([k, v]) = f(k, v))::from_entries()
  fn flat_map(f) = this::entries().map(fn ([k, v]) = f(k, v)::entries()).flat()::from_entries()
  fn filter(f) = this::entries().filter(fn ([k, v]) = f(k, v)::pipe(truthy))::from_entries()
  fn some?(f) = this::entries().some(fn ([k, v]) = f(k, v)::pipe(truthy))::from_entries()
  fn every?(f) = this::entries().every(fn ([k, v]) = f(k, v)::pipe(truthy))::from_entries()
  fn reduce(f, start) = this::entries().reduce(f, start)
  fn push(key, value) = {...this, [key]: value}
  fn concat(other) = {...this, ...other}
}

impl Collection for Array = {
  fn sample() = this[0]
  fn each(f) = this.forEach(f)
  fn find(f) = this.find(compose(f, truthy))
  fn map(f) = this.map(f)
  fn flat_map(f) = this::map(f).flat()
  fn filter(f) = this.filter(compose(f, truthy))
  fn some?(f) = this.some(compose(f, truthy))
  fn every?(f) = this.every(compose(f, truthy))
  fn reduce(f, start) = this.reduce(f, start)
  fn push(value) = [...this, value]
  fn concat(other) = [...this, ...other]
}

impl Collection for Map = {
  fn sample() = this.values().next().value
  fn each(f) {
    for let [k, v] of this {
      f(k, v)
    }
  }
  fn map(f) {
    let new_map = new Map([])
    for let [k, v] of this {
      new_map.set(k, f(v))
    }
    return new_map
  }
  fn find(f) {
    for let [k, v] of this {
      if f(k, v) {
        return v
      }
    }
  }
  fn flat_map(f) {
    let new_map = new Map([])
    for let [k, v] of this {
      for let [_k, _v] of f(k, v) {
        new_map.set(k, f(v))
      }
    }
    return new_map
  }
  fn filter(f) {
    let new_map = new Map([])
    for let [k, v] of this {
      if f(k, v) {
        new_map.set(k, f(v))
      }
    }
    return new_map
  }
  fn some?(f) {
    for let [k, v] of this {
      if f(k, v) {
        return true
      }
    }
    return false
  }
  fn every?(f) {
    for let [k, v] of this {
      if !f(k, v) {
        return false
      }
    }
    return true
  }
  fn reduce(f, start) {
    let acc = start
    for let [k, v] of this {
      acc = f(acc, k, v)
    }
    return acc
  }
  fn push(k, v) = this::clone().set(key, value)
  fn concat(other) {
    let new_map = this::clone()
    for let [k, v] of other {
      new_map.set(k, v)
    }
    return new_map
  }
}

impl Collection for Set = {
  fn sample() = this.values().next().value
  fn each(f) {
    for let elem of this {
      f(elem)
    }
  }
  fn map(f) {
    let out = new Set([])
    for let elem of this {
      out.add(f(elem))
    }
    return out
  }
  fn find(f) {
    for let elem of this {
      if f(elem) {
        return elem
      }
    }
  }
  fn flat_map(f) {
    let out = new Set([])
    for let elem of this {
      for let x of f(elem) {
        out.add(x)
      }
    }
    return out
  }
  fn reduce(f, start) {
    let acc = start
    for let elem of this {
      acc = f(acc, elem)
    }
    return acc
  }
  fn filter(f) {
    let out = new Set([])
    for let elem of this {
      if f(elem) {
        out.add(elem)
      }
    }
    return out
  }

  fn some?(f) {
    for let elem of this {
      if f(elem) {
        return true
      }
    }
    return false
  }
  fn every?(f) {
    for let elem of this {
      if !f(elem) {
        return false
      }
    }
    return true
  }
  fn push(elem) = this::clone().add(elem)
  fn concat(other) {
    let new_set = this::clone()
    for let item of other {
      new_set.add(item)
    }
    return new_set
  }
}

fn sample() = this[Collection].sample.call(this)
fn each(f) = this[Collection].each.call(this, f::call)
fn map(...fns) = this[Collection].map.call(this, compose(...fns))
fn flat_map(...fns) = this[Collection].flat_map.call(this, compose(...fns))
fn find(f) = this[Collection].find.call(this, f::call)
fn filter(f) = this[Collection].filter.call(this, f::call)
fn some?(...fns) = this[Collection].some?.call(this, compose(...fns))
fn every?(...fns) = this[Collection].every?.call(this, compose(...fns))
fn reduce(f, start) {
  if !start {
    start = this::sample()::identity()
  }
  return this[Collection].reduce.call(this, f::call, start)
}
fn push(...args) = this[Collection].push.call(this, ...args)
fn concat(other) = this[Collection].concat.call(this, other)

protocol OrderedCollection

impl OrderedCollection for Array = {
  fn first() = this[0]
  fn last() = this.at(-1)
  fn take_last(n) = this.slice(-1 - n, -1)
  fn take(n) = this.slice(0, n)
  fn sort(f) = this::clone().sort(f)
  fn reverse() = this::clone().reverse()
}

impl OrderedCollection for Map = {
  fn first() = this.entries().next().value
  fn last() = Array.from(this).at(-1)
  fn take_last() = new Map(Array.from(this).slice(-1 - n, -1))
  fn take() = new Map(Array.from(this).slice(0, n))
  fn sort() = new Map(Array.from(this).sort(fn ([_k1, v1], [_k2, v2]) = v2 - v1))
  fn reverse() = new Map(Array.from(this).reverse())
}

fn first() = this[OrderedCollection].first.call(this)
fn last() = this[OrderedCollection].last.call(this)
fn take_last(n) = this[OrderedCollection].take_last.call(this, n)
fn take(n) = this[OrderedCollection].take.call(this, n)
fn sort() = this[OrderedCollection].sort.call(this)
fn reverse() = this[OrderedCollection].reverse.call(this)

// OPERATORS

protocol Plus
protocol Minus
protocol Times
protocol Divide
protocol Exponent
protocol Mod
protocol Comparable
protocol LessThan
protocol And
protocol Or

impl And for Object = fn(thunk) = js_and(this, thunk)

//impl And for Function = fn(thunk) =
//  ::fn(...args) = this(...args) && thunk()::call(...args)
//
//impl Or for Function = fn(thunk) =
//  ::fn(...args) = this(...args) || thunk()::call(...args)
//
//impl And for Set = fn(thunk) =
//  ::fn(item) = this::call(item) && thunk()::call(item)

impl Or for Object = fn(thunk) = js_or(this, thunk)

impl Plus for Number = fn(other) {
  assert! typeof(other) === "number"
  return js_plus(this, other)
}

impl Minus for Number = fn(other) {
  assert! typeof(other) === "number"
  return js_minus(this, other)
}

impl Times for Number = fn(other) {
  assert! typeof(other) === "number"
  return js_times(this, other)
}

impl Divide for Number = fn(other) {
  assert! typeof(other) === "number"
  return js_divide(this, other)
}

impl Exponent for Number = fn(other) {
  assert! typeof(other) === "number"
  return js_exponent(this, other)
}

impl Mod for Number = fn(other) {
  assert! typeof(other) === "number"
  return js_mod(this, other)
}

let ComparableMixin = {
  fn greater_than_eq(other) = this::greater_than(other) || this == other
  fn less_than_eq(other) = this::greater_than(other) || this == other
}

impl Comparable for Number = {
  ...ComparableMixin,
  fn greater_than(other) {
    assert! typeof(other) === "number"
    return js_greater_than(this, other)
  }
  fn less_than(other) {
    assert! typeof(other) === "number"
    return js_less_than(this, other)
  }
}

impl Plus for String = fn(other) {
  assert! typeof(other) === "string"
  return js_plus(this, other)
}

impl Times for String = fn(amount) {
  assert! typeof(amount) === "number"
  return this.repeat(amount)
}

impl Comparable for String = {
  ...ComparableMixin,
  fn greater_than(other) {
    assert! typeof(other) === "string"
    return js_greater_than(this, other)
  }
  fn less_than(other) {
    assert! typeof(other) === "string"
    return js_less_than(this, other)
  }
}

fn plus(other) = ~Map{
  Plus => fn(other) = this[Plus](other),
  Collection => fn(other) = this::concat(other)
}
  ::find(::fn(proto, f) = this[proto])
  ::pipe(::fn(f) = this::f(other))

fn minus(other) = this[Minus](other)
fn times(other) = this[Times](other)
fn divide_by(other) = this[Divide](other)
fn exponent(other) = this[Exponent](other)
fn mod(other) = this[Mod](other)
fn greater_than(other) = this[Comparable].greater_than.call(this, other)
fn greater_than_eq(other) = this[Comparable].greater_than_eq.call(this, other)
fn less_than(other) = this[Comparable].less_than.call(this, other)
fn less_than_eq(other) = this[Comparable].less_than_eq.call(this, other)

fn and(other) {
  if this {
    return this[And](other)
  } else {
    return this
  }
}
fn or(thunk) {
  // TODO: this can't be inlined for some reason
  fn null?() = this === null
  if js_or(this === undefined, this::null?) {
    return thunk()
  } else { 
    return this[Or](thunk)
  }
}

[plus minus times divide_by exponent mod greater_than greater_than_eq less_than less_than_eq and or]
  ::each(impl_call_for_bound)

// Printable

protocol Printable

fn _resolve_keyword_str(kw) = kw.replaceAll("__q", "?").replaceAll("__b", "!")

impl Printable for ObjectLiteral = fn() =
  this::map(fn (k, v) = [_resolve_keyword_str(k), v]) 

fn print_for_generic_clone_object() {
  let out = this::clone()
  for let [key, value] of this::entries() {
    let new_key = _resolve_keyword_str(key)
    out[new_key] = value
    if new_key != key {
      js_object_delete(out, key)
    }
  }
  return out
}

impl Printable for Keyword = fn() =
  ":" + _resolve_keyword_str(this.value)

impl Printable for Boolean = fn() = this

fn when_exists(f) = this && f::call(this)

fn otherwise(val) = this || val

fn printable() {
  if this {
    return ~Map{
      Printable => fn() = this[Printable]()
      Clone => print_for_generic_clone_object
    }
      ::find(::fn(proto) = this[proto])
      ::when_exists(::fn(printf) = ::printf())
      ::otherwise(this)
  } else {
    return this
  }
}

fn log() {  
  console.log(this::printable())
  return this
}

// Helpers

fn int?() = Number.isInteger(this)
fn float?() = typeof(this) === "number" && !int?(this)
fn even?() = (this % 2) === 0
fn pos?() = this >= 0
fn to_f() = Number(this)
fn to_i() = Math.floor(Number(this))
fn to_s() = this.toString()
fn to_b() = truthy(this)

[int? even? pos? float? to_f to_i to_s to_b]::each(impl_call_for_bound)

