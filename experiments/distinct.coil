protocol HashCode

impl HashCode for Number = fn() = BigInt(this)
impl HashCode for BigInt = fn() = this
impl HashCode for String = fn() = js_str_hash(this)
impl HashCode for Keyword = fn() = str("__keyword_hash__" this)::hash()
impl HashCode for Array = fn() = ::reduce(fn(code, val) = (code * 31n) + val::hash(), 7n)
impl HashCode for Set = fn() = ::reduce(fn(code, val) = (code * 31n) + val::hash(), 3n)
impl HashCode for ObjectLiteral = fn() =
  ::reduce(fn(code, [key, val]) = (code * 31n) + [val val]::hash(), 7n)
@def_call
fn hash() = this[HashCode]()

@def_vector
fn HashSet(@items) {
  this.set = items::map(hash)::as_set()
}
impl Call for HashSet = fn(val) = this.set.has(val::hash())
impl Symbol.iterator for HashSet = fn() = this.items::iter()

fn distinct() = ::reduce(fn(set, cur) {
  if set::call(cur) {
    return set
  } else {
    return new HashSet([...set, cur])
  }
}, new HashSet([]))

[{kind: :if} {kind: :if} {kind: :else}]
  ::distinct()
  ::as_array()
  ::log()
