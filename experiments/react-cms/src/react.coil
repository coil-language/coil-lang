import React from "react"
import * as react_js from "./react.js"
export * from "./react.js"
let Atom = react_js.Atom

impl Pipe for Atom = fn(...fns) = compose(...fns)(this.val)

export protocol View
impl View for Atom = fn = this.val::view(this)
impl View for Object = fn = this

export fn view(...args) = this&.[View](...args)
view = def_call(view)

export fn Elem(@ctor, @attrs, @children) {}
impl Into for Elem = fn(children) = 
  new Elem(this.ctor, this.attrs, [...this.children, ...children])
impl View for Elem = fn() {
  if this.children is Array {  
    return React.createElement(this.ctor, this.attrs, ...this.children::map(view))
  } else {
    return React.createElement(this.ctor, this.attrs, this.children::view())
  }
}

impl Vector for Keyword = fn(children) {
  let str = this.value
  let [elem_name, ...classes] = str.split(".")
  return new Elem(elem_name, {className: classes.join(" ")}, children)
}

impl Record for Keyword = fn(attrs) {
  attrs = attrs::map(fn([key, val]) {
    // TODO: make this protocol based if we keep it.
    if key::as_str().startsWith("data-") && val is Atom {
      return [key, val.val]
    } else {
      return [key, val]
    }
  })  
  attrs = attrs::into({})  
  let str = this.value
  let [elem_name, className] = str.split(".")
  return new Elem(elem_name, {className, ...attrs}, attrs::at(:children))
}

protocol ComponentOption

export fn Css(@rules) {}
define Vector for Css = fn(rules) = new Css(rules)

impl ComponentOption for Css = fn() {
  let sheet = document.styleSheets[0]
  for rule of this.rules {
    sheet.insertRule(rule)
  }
}

export fn component(Component, ...opts) {
  for opt of opts {
    opt[ComponentOption]()
  }
  let ReactComponent = fn(...args) = Component(...args)::view()
  define Record for ReactComponent = fn(attrs) {
    attrs = attrs::into({})
    return React.createElement(ReactComponent, attrs, attrs::at(:children))
  }
  define Vector for ReactComponent = fn(children) =
    React.createElement(ReactComponent, null, ...children::map(view))
  define Into for ReactComponent = fn(iterable) =
    React.createElement(ReactComponent, null, [...iterable::map(view)])
  return ReactComponent
}