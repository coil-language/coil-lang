protocol ApplyFormat

impl ApplyFormat for String = fn = this
impl ApplyFormat for Object = fn (key) = key::call(this)

fn apply_format(arg) = arg.[ApplyFormat](this)

str.fmt = fn (...args) = fn (obj) =
  args::map(obj::apply_format)::into("")

fn Lexer(@entries) {}

let lexer = Lexer{
  /^machine\b/ => :machine
  /^{/ => :open_b
  /^}/ => :close_b
  /^(/ => :open_p
  /^(/ => :close_p
  /^[a-zA-Z0-9\-]+/ => :id
}

let parse_machine = Parser[
  Init[{type: :machine}]
  Chomp[:machine]
  Store[:id :name]
  Chomp[:open_b]
  Until[:close_b parse_machine_statement :statements]
  Chomp[:close_b]
]

let eval_machine =str.fmt(
  "{name: '" :name "',"
  fn ({statements}) = statements::map(eval_statement)::join(",\n")
  "}"
)
