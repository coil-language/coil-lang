protocol Effect

fn run_effect() {
  if this[Effect] {
    return this[Effect]()
  } else {
    console.log("No effect found for", this)  
    raise!(this)
  }
}

async fn spawn(generator_fn, ...gen_args) {
  let generator = generator_fn(...gen_args)
  let state = {done: false}
  let yield_result = null
  let effects = []
  while !state.done {
    state = await generator.next(yield_result)
    if state.done { break }
    let effect = state.value
    try {
      yield_result = await effect::run_effect()
    } catch error {
      state = await generator.throw(error)
      yield_result = await state.value::run_effect()
      effects.push(state.value)
    }
    effects.push(effect)
  }
  return {effects, value: state.value}
}

async fn run(generator_fn) = (await spawn(generator_fn))::at(:value)

let Channel = ~Struct["Channel"]

impl :send for Channel = fn (msg) {
  this.resolve(msg)
}

impl :subscribe for Channel = fn(f) {
  this.resolve = f
}

impl Symbol.asyncIterator for Channel = async fn*() {
  loop {
    yield new Promise(::fn (resolve) = this.resolve = resolve)
  }
}

fn fork(generator_fn) {
  let chan = new Channel()
  spawn(generator_fn, chan)
  return chan
}

// builtin effects

fn CallEffectWith(effect, ...args) {
  this.effect = effect
  this.args = args
}

fn with(...args) = new CallEffectWith(this, ...args)

impl Effect for CallEffectWith = fn() =
  this.effect[Effect](...this.args)

fn intern_vec(klass) {
  if !klass.cache {
    klass.cache = ~Map{}
    define Vector for klass = fn(args) {
      let hash_value = args::hash()
      if let obj = klass.cache.get(hash_value) {
        return obj
      } else {
        let obj = new klass(...args)
        klass.cache.set(hash_value, obj)
        return obj
      }
    }
  }
  return klass
}

@intern_vec
fn Msg(...descriptors) {
  this.descriptors = descriptors
}

impl Equal for Msg = fn(obj) =
  obj is Msg && this.descriptors == obj.descriptors

// for listening to window events

// this should be an underscore based transform, not :filter
let EventStream = ~Struct["EventStream" :event_type :filter]

impl Validation for EventStream = {
  event_type: #(window::has?("on" + &::as_str()))
}

impl EventStream = {
  fn start() {
    this.watch = ::fn(e) {
      if this.filter::call(e) {
        this.resolve::call(e)
      }
    }
    window.addEventListener(this.event_type, this.watch)
  }
  fn end() = window.removeEventListener(this.event_type, this.watch)
  fn subscribe(f) {
    if !this.watch { this.start() }
    this.resolve = f
  }
}

impl Symbol.asyncIterator for EventStream = async fn*() {
  loop {
    yield await new Promise(::fn(resolve) = this.subscribe(resolve))
  }
}

// so you can iterate over animation frames
let AnimationFrames = {}

define Symbol.asyncIterator for AnimationFrames = async fn*() {
  loop {
    yield await new Promise(fn (resolve) = requestAnimationFrame(resolve))
  }
}

// so you can listen to multiple event sources at once
fn Race() {}

define Vector for Race = async fn*(items) {
  items::all!(:subscribe)
  loop {
    let promises = items::map(fn(stream) = new Promise(fn (resolve) = stream.subscribe(resolve)))
    yield await Promise.race(promises)
  }
}

// sane defaults
define Effect for ~Msg[:keydown] = fn(filter) =
  new EventStream("keydown", _::at(:key)::pipe(filter))

define Effect for ~Msg[:mousedown] = fn() = new EventStream("mousedown", _)
define Effect for ~Msg[:mousemove] = fn() = new EventStream("mousemove", _)

let API = { todos: "https://jsonplaceholder.typicode.com/todos" }

define Effect for ~Fetch[:get API.todos :error] = fn() =
  console.log("error")

define Effect for ~Fetch[:get API.todos :404] = fn(error) =
  console.log("404", error.message)

define Effect for ~Fetch[:get API.todos :loading] = fn() =
  console.log("loading")

async fn* main() {
  let result = yield* http.get(API.todos)
  if result::error?() { return null }
  result::at(-1)::log("LAST")
  return result
}

run(main)
