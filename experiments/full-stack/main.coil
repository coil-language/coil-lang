import client from "./client.js"

import * as coil from "npm:@coil-lang/compiler"
// TODO: dynamically import based off file names

fn Model(@name @fields) {}
define "{}" for Model = fn(entries) {
  let name = entries::find(0 _ == :table_name)::pipe(1)
  let fields = entries::keep(0 _ != :table_name)::into([])
  return new Model(name fields)
}

let Todos = Model{
  table_name: "Todos"
  title: :string
  description: :string
}

protocol Query

impl Query for Model = {
  fn all() =
    client.queryArray(
      str("SELECT id, " this.fields::map(0 as_str)::join(", ") " FROM " this.name)
    ).then(::fn ({rows}) =  
      rows::map(::fn (row) = [:id, ...this.fields::map(0)]::zip(row)::into({}))
    )
}

fn query_all = this[Query].all.call(this)

let array_result = await Todos::query_all()
console.log(array_result::into([]));


// let Models = Map{
//   "user" => User
// }
// pull all files
// generate this View map that goes from ..path names.. => component
// let component = View::pipe(*Url*)
// let coil_react_boilerplate = ... ?? how do we get this? could hard code for now
// let data_for_request = JSON.stringify(Model.query_from_url(*Url*))
//          ??? how do we get this       ^^^^
// let mounting_code = str("React.render(document.body, 
//                  React.createElement(" component.name ", { " data_for_request " }))")
// let output = str(coil_react_boilerplate ";" component.toString() ";" mounting_code)
// GOT IT!


async fn read_coil_file(path) {
  let ast = await Deno.readTextFile(path).then(coil.compile)
  // keyword equality is broken :(
  let component = ast::find(:type :value Set["export_default"]).expr
  return {name: component.name, string: coil.eval_ast([component])}
}

async fn read_coil_component_file(path) {
  let ast = await Deno.readTextFile(path).then(coil.lex_and_parse)
  // keyword equality is broken :(
  let component = ast::find(:type :value Set["export_default"]).expr
  return {name: component.name, string: coil.eval_ast([component])}
}

let Routes = Map{}

for await {name} of Deno.readDir("./view") {
  let model_map = Map{}
  for await {name: component_name} of Deno.readDir(str("./view/" name)) {
    model_map.set(
      component_name.split(".coil")[0]
      str("./view/" name "/" component_name)
    )
  }
  Routes.set(name model_map)
}

console.log("routes" Routes)

let server = Deno.listen({port: 8080})
console.log("HTTP webserver running.  Access it at:  http://localhost:8080/");
let coil_react_boilerplate = await Deno.readTextFile("./boilerplate/coil_react.js")

for await conn of server {
  serveHttp(conn)
}


async fn server_request(url) {
  let path = Routes::pipe(...url.pathname.split("/")::skip(1))
  if path::nil?() { return }
  let component = await read_coil_component_file(path)
  let react = "
    <script crossorigin src='https://unpkg.com/react@18/umd/react.development.js'></script>
    <script crossorigin src='https://unpkg.com/react-dom@18/umd/react-dom.development.js'></script>
    <script crossorigin src='https://www.unpkg.com/@coil-lang/compiler@0.0.9/dist/prelude.js'></script>
  "


  let data_for_request = {name: "marcelle"}
  let mounting_code = str("
    ReactDOM
      .createRoot(document.getElementById('app'))
      .render(to_react_child.call(" component.name "(new ObjectLiteral(" JSON.stringify(data_for_request) "))));
  ")

  return str("
    <html>
      <head>" react "</head>
      <body><div id='app'></div></body>
      <script>
        'use strict';"
        coil_react_boilerplate ";"
        component.string ";"
        mounting_code
      "</script>
    </html>
  ")
}

async fn serveHttp(conn) {
  let httpConn = Deno.serveHttp(conn)
  for await requestEvent of httpConn {
    requestEvent.respondWith(
      new Response(
        await server_request(new URL(requestEvent.request.url))
        {
          status: 200,
          headers: new Headers([["Content-Type" "text/html"]])
        }
      )
    )
  }
}
