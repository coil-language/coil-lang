import React from "react"
import {Atom} from "./react.js"

protocol ToReactChild

impl ToReactChild for Atom = fn = this.val
impl ToReactChild for Object = fn = this

@def_call
fn to_react_child() = this[ToReactChild]()

fn Elem(@ctor, @attrs, @children) {}
impl Into for Elem = fn(children) = 
  new Elem(this.ctor, this.attrs, [...this.children, ...children])
impl ToReactChild for Elem = fn() {
  if this.children is Array {  
    return React.createElement(this.ctor, this.attrs, ...this.children::map(to_react_child))
  } else {
    return React.createElement(this.ctor, this.attrs, this.children::to_react_child())
  }
}

impl Vector for Keyword = fn(children) {
  let str = this.value
  let [elem_name, ...classes] = str.split(".")
  return new Elem(elem_name, {className: classes.join(" ")}, children)
}

impl Record for Keyword = fn(attrs) {
  attrs = attrs::into({})  
  let str = this.value
  let [elem_name, className] = str.split(".")
  return new Elem(elem_name, {className, ...attrs}, attrs::at(:children))
}

export fn component(Component) {
  let ReactComponent = fn(...args) = Component(...args)::to_react_child()
  define Record for ReactComponent = fn(attrs) {
    attrs = attrs::into({})
    return React.createElement(ReactComponent, attrs, attrs::at(:children))
  }
  define Vector for ReactComponent = fn(children) =
    React.createElement(ReactComponent, null, ...children::map(to_react_child))
  define Into for ReactComponent = fn(iterable) =
    React.createElement(ReactComponent, null, [...iterable::map(to_react_child)])
  return ReactComponent
}