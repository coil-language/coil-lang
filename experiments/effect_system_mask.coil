let Point = ~Struct["Point" :x :y]

let Polygon = ~Struct["Polygon" :points]

let state = "inactive"
let masks = []

protocol Render

impl Effect for Draw = fn(object, elem) = object[Render]()

define Effect for ~Msg[:activate] = fn() =
  state = "idle"

let currently_hovering_point = new Atom(null)

define Effect for ~Msg[:currently_hovering_point :get] = fn() = 
  currently_hovering_point

define Effect for ~Msg[:currently_hovering_point :hover] = fn(point) = 
  currently_hovering_point.set(point)

impl Render for Point = fn*() {
  let currently_hovering_point = yield ~Msg[:currently_hovering_point :get]
  for _ of currently_hovering_point {
    let color = ~Map{this => "yellow"}
      ::at(currently_hovering_point::$)
      ::otherwise("green")
    yield rect({
      x: this.x - 5
      y: this.y - 5
      width: 10
      height: 10,
      color,
      on_hover: ~Msg[:currently_hovering_point :hover]
    })
  }
}

impl Render for Polygon = fn*() {  
  let line = yield polyline({points: this.points::map(fn({x, y}) = str(x "," y)).join(" ")})
  let points = yield this.point::map(fn({x, y}) = ~Draw[point])::as_fragment()
  return points
}  

define Effect for ~Msg[:mask_editor "idle"] = fn*() {
  let elem = yield ~Draw[svg()]
  for mask of mask_editor.masks {
    let result = yield ~Draw[mask elem]
  }
}

fn* MaskEditor(channel) {
  yield channel::wait_for(~Msg[:activate])

  while state != "inactive" {
    yield ~Msg[:mask_editor state]
  }
}