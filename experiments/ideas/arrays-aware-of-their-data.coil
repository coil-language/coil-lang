
protocol Kinds

fn ctors() = ::map(fn (item) = item.constructor)::into(Set[])

fn with_ctors() = ::tap(fn { this.[Kinds] = ::ctors() })

fn tap(f) {
  this::f::call()
  return this
}

impl Bag for Array = {
  fn push(val) = [...this, val]::with_ctors()
  fn replace(old-val, new-val) = ::map(fn(val) {
    if val == old-val {
      return new-val
    } else {
      return val
    }
  })::with_ctors()
  fn concat(other) = [...this, ...other]::with_ctors()
}

fn assert! {}

impl IntoCtors for Array = {
  fn Set {
    assert!(this.[Kinds]::len() == 1)
    let [kind] = this.[Kinds]
    return kind[IntoCtors].Set()
  }
}

impl IntoCtors for Object = {
  fn Set() = Set[...this]
}

[1 2]::into(:Set) // Set[1 2]

[User{id: 10} User{id: 10}]::into(:Set) // KeyedSet[User{id: 10}]

  