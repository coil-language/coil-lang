fn eval_expr(val, f) {
  if this === _ {
    return f::call(val)
  } else if this::vector?() {
    return ::zip(0..)
      ::map(fn([key, idx]) = [key, val::at(idx)])
      ::as_obj()
      ::pipe(f)
  } else if this is Keyword {
    return f::call(val::at(this))
  } else if this::record?() {
    // idk what to do here
  }
}

define Vector for Array = fn(tokens) {
  let tokens_iter = tokens::iter()
  let f = tokens_iter::until(fn(x) = x === :for)::pipe(#(compose(...&)))
  let [expr, _of, iterable] = tokens_iter
  return iterable::map(fn(elem) = expr::eval_expr(elem, f))::as_array()
}

~Array[_ >= 80 :for :score :of [{score: 80}]]
  ::log()
