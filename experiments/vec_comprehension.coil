fn extract_from(elem) {
  if this::vector?() {
    return ::zip(0..)
      ::map(fn([key, idx]) = [key, elem::at(idx)])
      ::as_obj()
  } else if this::record?() {
    // idk what to do here
  } else {
    return this::call(elem)
  }
}

define Vector for Array = fn(tokens) {
  let tokens_iter = tokens::iter()
  let f = tokens_iter::until(fn(x) = x === :for)::pipe(#(compose(...&)))
  let [extract_expr, _of, iterable, ...rest] = tokens_iter
  let cond_fn = #(true)
  if rest::first() == :if {
    cond_fn = rest::skip(1)::pipe(#(compose(...&)))
  } else if rest::first() == :unless {
    cond_fn = rest::skip(1)::pipe(#(compose(...&, !_)))
  }
  return iterable
    ::map(fn(elem) = extract_expr::extract_from(elem))
    ::keep(cond_fn)
    ::map(f)
    ::as_array()
}

~Array[_ :for :score :of [{score: 80} {score: 20}] :unless _ >= 80]
  ::log()
