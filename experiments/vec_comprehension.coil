fn eval_expr(val, f) {
  if this === _ {
    return f::call(val)
  } else if this::vector?() {
    return ::zip(0..)
      ::map(fn([key, idx]) = [key, val::at(idx)])
      ::as_obj()
      ::pipe(f)
  } else if this::record?() {

  }
}

define Vector for Array = fn(tokens) {
  let [name, _for, expr, _of, iterable] = tokens
  let output = []
  for elem of iterable {
    output.push(expr::eval_expr(elem, name))
  }
  return output
}

~Array[:name :for _ :of [{name: "marcelle"}]]
  ::log()
