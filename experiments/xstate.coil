import { createMachine, assign } from "npm:@xstate/fsm";

// FAKE OBJECT (foo) API START

protocol PropChain
protocol Foo
protocol RootName

fn foo?() = this[Foo]

fn root_node?(root) = this&.[RootName] == root

fn eval_msg_chain(obj) =
  this[PropChain]::reduce(fn(o, k) = o::at(k), obj)

fn foo(root_node, msgs) = new Proxy({}, {
  fn get(_target, msg, _receiver) {
    msgs ||= []
    if msg == RootName {
      return root_node
    } else if msg == Foo {
      return true
    } else if msg == PropChain {
      return msgs
    } else {
      return foo(root_node, [...msgs, msg])
    }
  }
})

// FAKE OBJECT (foo) API END

protocol ResolveAssignExpr

export let Target = ~DefVector[:state]
export let Assign = ~DefRecord[:properties]

impl ResolveAssignExpr for Function = fn(ctx_key, ctx, args) =
  this(ctx, args)

impl ResolveAssignExpr for ObjectLiteral = fn(ctx_key, ctx, args) {
  let local_ctx = ctx::at(ctx_key) || {}
  return local_ctx::merge(this::map(fn(key, value) =
    [key, value::resolve_assign_expr(key, local_ctx, args)]
  ))
}

fn resolve_assign_expr(ctx_key, ctx, xstate_args) {
  if this::root_node?(:ctx) {
    return this::eval_msg_chain(ctx::at(ctx_key))
  } else if this::root_node?(:args) {
    return this::eval_msg_chain(xstate_args)
  } else {
    return this[ResolveAssignExpr](ctx_key, ctx, xstate_args)
  }
}

impl ResolveAssignExpr for Underscore = fn(ctx_key, ctx, xstate_args) {
  let output = ctx::at(ctx_key)
  for {f, args} of this {
    let actual_args = args::map(fn(arg) =
      arg::resolve_assign_expr(ctx_key, ctx, xstate_args)
    )
    output = output::f::call(...actual_args)
  }
  return output
}

protocol GenerateXState

impl GenerateXState for Assign = fn(event) {
  let my_assign = {}
  for [key, value] of this.properties {
    if value&.[ResolveAssignExpr] {
      my_assign[key] = fn(ctx, args) = value::resolve_assign_expr(key, ctx, args)
    } else {
      my_assign[key] = fn(ctx, args) = value
    }
  }

  return event::update(:actions _::push(assign(my_assign)))
}

impl GenerateXState for Target = fn(event_obj) =
  event_obj::insert(:target this.state::as_str())

fn as_xstate() = createMachine({
  initial: this.initial,
  context: this.context,
  states: this::omit(:initial :context)::map_values(fn(events) = {
    on: events::map_values(fn(gen_fn) =
      gen_fn(foo(:ctx), foo(:args))::as_array()
        ::reduce(fn(event, effect) = effect[GenerateXState](event),
                {actions: []}))
  })
})

export default as_xstate
