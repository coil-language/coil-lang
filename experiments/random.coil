// ideas for randomly generating data.
// could be taken to extremes to something like faker.js

protocol Random

fn random(...args) = this[Random](...args)

define Random for :xs_float = Math.random
define Random for :sm_float = fn() = Math.random() * 50
define Random for :lg_float = fn() = Math.random() * 100000000
define Random for :med_float = fn() = Math.random() * 1000
define Random for :xs_int = fn() = Math.floor(Math.random() * 10)
define Random for :sm_int = fn() = Math.floor(Math.random() * 50)
define Random for :lg_int = fn() = Math.floor(Math.random() * 100000000)
define Random for :int_of = fn(max_size) = Math.floor(Math.random() * max_size)

impl Random for Set = fn(max_size) {
  let size = Math.min(:sm_int::random(), max_size || 50)
  return (0..size)
    ::map(#(:int_of::random(this.size)))
    ::map(::as_array())
    ::as_array()
}

// console.log(:float::random())

@def_record
fn Fake(@entries) {}

impl Random for Fake = fn() = ::map(fn([key, kind]) = [key, kind::random()])::as_obj()

// ~Fake{name: :name
//       age: :pos_int}

console.log(char_alpha_numeric?::random())
