// feb-26-2023

// The most dangerous thought in software development is
// "I really should clean this code up."

// This seems like an innocent, and honestly respectful idea right?
// It does until you start to ask why this question is coming up.

// In practice I've seen it come as a result of:
// 1 - hearing of a new design pattern, which sounds like it 
//     contradicts the current design. - this also applies
//     for programming paradigms etc.
//     "this code has tons of mutation... I really should clean it up."
// 2 - knowing the code is wrong, but not having an immediate 
//     idea of how to fix it.

// Here's a simple rule-of-thumb, 
// "until the refactor is crystal clear in your head, don't do it"

// In most cases without this applying this rule, the resulting code will be worse.

// In my experience, every case I can think of has been worse.

// I love martin fowlers quote "I will not refactor this code, because I don't yet know where it wants to go."
// Each refactor requires a deep, well thought out plan.
// No UML requried, just certainty

// Right now, I feel bad about how the prelude is all in one file,
// but I can't think of anything better, so why should I change it?
// In fact, if I apply the rule-of-thumb, I know that I will end up with worse code.
// I've experienced this so many times.

// So why doesn't coil have X feature?
//  - Because it is not immediately clear to me why it should have this feature.
//  - OR it is not immediately clear to me how to implement this feature in a way
//    that feels _right_ to me. 
