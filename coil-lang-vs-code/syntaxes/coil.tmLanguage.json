{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "coil",
  "patterns": [
    {
      "include": "#comments"
    },
    {
      "include": "#lang_constants"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#properties"
    },
    {
      "include": "#bind"
    },
    {
      "include": "#record_constructor"
    },
    {
      "include": "#keywords"
    },
    {
      "include": "#variables"
    },
    {
      "include": "#numbers"
    }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "name": "comment.line.peacock",
          "begin": "(\\/\\/).*",
          "end": "\n"
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.coil",
          "match": "\\b(if|while|else|yield|return|assert|continue|break|export|default|import|from)\\b"
        },
        {
          "match": "(impl)\\b(.*)\\b(for)\\b",
          "captures": {
            "1": {
              "name": "keyword.other"
            },
            "2": {
              "name": "entity.name.type"
            },
            "3": {
              "name": "keyword.other"
            }
          }
        },
        {
          "match": "(define)\\b(.*)\\b(for)\\b",
          "captures": {
            "1": {
              "name": "keyword.other"
            },
            "2": {
              "name": "entity.name.type"
            },
            "3": {
              "name": "keyword.other"
            }
          }
        },
        {
          "name": "keyword.control",
          "match": "\\b(for)\\b"
        },
        {
          "name": "keyword.other",
          "match": "\\b(async|fn|of|impl|define|let|protocol)\\b"
        },
        {
          "name": "keyword",
          "match": "\\b(is|typeof|await)\\b"
        },
        {
          "match": "\\bnew\\b",
          "name": "keyword.operator.new"
        }
      ]
    },
    "variables": {
      "patterns": [
        {
          "match": "\\b([A-Z][a-zA-Z1-9_\\!\\?]*)\\b",
          "name": "entity.name.type"
        },
        {
          "match": "\\b([a-z][a-zA-Z1-9_\\!\\?]*)\\b",
          "name": "variable.name"
        },
        {
          "name": "variable",
          "match": "&"
        }
      ]
    },
    "record_constructor": {
      "patterns": [
        {
          "match": "\\~([a-zA-Z][a-zA-Z1-9_\\!\\?]*)\\{",
          "captures": {
            "1": {
              "name": "entity.name.type"
            }
          }
        }
      ]
    },
    "lang_constants": {
      "patterns": [
        {
          "match": "\\b(true|false|null|undefined|this)\\b",
          "name": "constant.language"
        },
        {
          "match": "(:[a-zA-Z][a-zA-Z1-9_!?]*)",
          "name": "constant.language"
        }
      ]
    },
    "properties": {
      "patterns": [
        {
          "match": "\\.([a-zA-Z][a-zA-Z1-9_\\!\\?]*)\\(\\b",
          "name": "entity.name.function"
        }
      ]
    },
    "bind": {
      "patterns": [
        {
          "match": "::([a-zA-Z][a-zA-Z1-9_\\!\\?]*)\\b",
          "captures": {
            "1": {
              "name": "entity.name.function"
            }
          }
        },
        {
          "match": "([a-zA-Z][a-zA-Z1-9_\\!\\?]*)\\(",
          "captures": {
            "1": {
              "name": "entity.name.function"
            }
          }
        }
      ]
    },
    "strings": {
      "name": "string.quoted.double.coil",
      "begin": "\"",
      "end": "\"",
      "patterns": [
        {
          "name": "constant.character.escape.coil",
          "match": "\\\\."
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "match": "[\\-\\+]?(\\d+)(n)",
          "captures": {
            "1": {
              "name": "constant.numeric"
            },
            "2": {
              "name": "emphasis"
            }
          }
        },
        {
          "name": "constant.numeric",
          "match": "[\\-\\+]?(\\d*\\.)?\\d+"
        }
      ]
    }
  },
  "scopeName": "source.coil"
}
