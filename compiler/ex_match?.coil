protocol matches?

def Object:prototype.matches?(object) = this == object
def Function:prototype.matches?(object) = object instanceof this
def Underscore:prototype.matches?(object) = this(object)
def ObjectLiteral:prototype.matches?(object) =
  this.all?(|[key pattern]| object.has?(key) and pattern.matches?(object.key))
def Array:prototype.matches?(object) =
  this.len() == object.len() and this.zip(object).all?(|[pattern value]| pattern.matches?(value))

def Match(@entries) end
def Match:prototype.invoke(object) =
  this:entries.find(|[pattern _]| pattern.matches?(object)).pipe(|[_ f]| f(object))

let f = Match{
  def [1 2]() = "two"
  def Array([first]) = first
  def Error(e) = e.log()
}

f([13]).log()
