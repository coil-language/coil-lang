import { ParseError } from "./parse_error.js"
import tokenize from "./tokenizer.mjs"
import parse from "./parser.mjs"
import emit from "./emit.mjs"
fn str(...args) = args.map(|arg| arg:toString()).join("")

fn CollectionView(@collection, @idx) end

fn CollectionView:prototype.(Collection:len) =
  this:collection.len() - this:idx

fn CollectionView:prototype.(Collection:empty?) =
  this.len() == 0

fn CollectionView:prototype.(Collection:at)(idx) =
  this:collection.at(this:idx + idx)

fn CollectionView:prototype.(OrderedSequence:first) =
  this:collection.at(this:idx)

fn CollectionView:prototype.(OrderedSequence:last) =
  this:collection.last()

fn CollectionView:prototype:skip(n) =
  CollectionView[this:collection, this:idx + n]

fn* CollectionView:prototype.(Symbol:iterator)
  for i of this:idx..this:collection.len()
    yield this:collection.i
  end
end

fn compile(string std_prefix)
  let tokens = string.pipe(tokenize)
  let collection_view = CollectionView[tokens 0]
  let ast = parse(collection_view)
  let js = emit(ast)
  let imports = str("
  \"use strict\";
  import { ObjectLiteral, Nil, nil, Keyword, dot, raise__b } from '" std_prefix "/src/std/globals.js'
  import Meta, {
    nil__q, is_a__q, create, from_entries, as_num, exists__q, as_bool, log, invoke, pipe
  } from '" std_prefix "/src/std/meta.js';
  import Iter, {
    take, until, skip, find, zip, reduce, map, flat_map, each,
    filter, reject, all__q, any__q, split, compact, join, into, compose
  } from '" std_prefix "/src/std/iter/index.js';
  import Algebra from '" std_prefix "/src/std/algebra.js';
  import Bool, { negate } from '" std_prefix "/src/std/bool.js';
  import Collection, { at, len, empty__q, has__q } from '" std_prefix "/src/std/collection.js';
  import OrderedSequence, { first, last } from '" std_prefix "/src/std/ordered_sequence.js';
  import {
    inc, InclusiveRange, ExclusiveRange, InclusiveRangeNoMaximum,
    InclusiveRangeNoMinimum, ExclusiveRangeNoMaximum, ExclusiveRangeNoMinimum
  } from '" std_prefix "/src/std/range.js';
  import Record, { keys, values } from '" std_prefix "/src/std/record.js';
  import Underscore, { _ } from '" std_prefix "/src/std/underscore.js';
  import CondMap from '" std_prefix "/src/std/cond_map.js'
  ")

  return js + imports
end

export default compile