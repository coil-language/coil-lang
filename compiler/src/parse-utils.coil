-- TODO: rename this to `test` or something, since ? implies
-- it returns a bool...
export protocol matches?

-- parse_tools

-- I just a vision of a code editor that understands many languages
-- built on hypermedia in which languages understand each other
-- uhh.... so much work, but so beautiful

def String:prototype.matches?(str)
  if str:startsWith(this)
    return {result: this, skip: this.len()}
  else
    return false
  end
end

def RegExp:prototype.matches?(str, group)
  if !group 
    group = 0
  end
  let result = str:match(this)
  if result.nil?() or result:index != 0
    return false
  else
    return {result: result.group, skip: result.0.:length}
  end
end

def _.matches?(str) = {result: str, skip: 0}

-- I live proudly from where I stand, knowing full well how temporary, and ignorant my worldview is.
-- still it has much truth & beauty in it and it has to be expressed

def RegExp:prototype.+(regex) = RegExp[this:source + regex:source]

def* generator end
let GeneratorFunction = generator:constructor

export protocol run

def GeneratorFunction:prototype.run(string, ...args)
  let [gen result] = [this(...args) nil]
  while let {value, done} = gen:next(result)
    if done
      return [value string]
    else if let [r s] = value.run(string, result)
      result = r
      string = s
    end
  end
end

def ObjectLiteral:prototype.run(string) = this:kind.run(this, string)
export def test(pattern) = {kind: :test, pattern}
export def chomp!(pattern) = {kind: :chomp!, pattern}
export def capture!(pattern, group) = {kind: :capture!, pattern, group: group or 0}
export def trimmed(parser) = {kind: :trimmed, parser}
export def trimmed!(parser) = {kind: :trimmed!, parser}
export def trim_before!(parser) = {kind: :trim_before!, parser}
export def trim = {kind: :trim}
export def debug = {kind: :debug}

def :trimmed.run({parser}, string)
  let [result s] = parser.run(string:trimLeft())
  return [result string]
end

def :trimmed!.run({parser}, string)
  let [result s] = parser.run(string:trimLeft())
  return [result s:trimLeft()]
end

def :trim_before!.run({parser}, string)
  let [result s] = parser.run(string:trimLeft())
  return [result s]
end

def :test.run({pattern}, string) = [pattern.matches?(string).as_bool(), string]

def :chomp!.run({pattern}, string)
  if let {skip} = pattern.matches?(string)
    return [true string:slice(skip)]
  end
  this.log({pattern}, string)
  panic!()
end

def :capture!.run({pattern, group}, string)
  if let {result skip} = pattern.matches?(string, group)
    return [result string:slice(skip)]
  end
  this.log({pattern, group}, string)
  panic!()
end

def :trim.run(_, string) = [nil string:trimLeft()]

def :debug.run(_, string, state) = [[state string], string]
