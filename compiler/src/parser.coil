
fn expect_token!(tokens, kw)
  if tokens.first().at(:type) != kw
    raise!(ParseError[kw, tokens.first()])
  else
    return tokens
  end
end

fn verify_exists!(expr, parser)
  if expr.nil?()
    panic!("Parser Failed - Expected " parser)
  else
    return expr
  end
end

#  PARSER MACHINE IMPL

protocol parse

fn line_and_col({line, col}) = {line: line, col: col}

fn Init(@expr) end
fn Init:prototype.parse([_expr tokens]) = 
  [{...this:expr, pos: line_and_col(tokens.first())} tokens]

fn One(@kw, @as) end
fn One:prototype.parse([expr tokens])
  let {value, type} = expect_token!(tokens this:kw).first()
  return [{...expr, this:as => value} tokens:skip(1)]
end

protocol can_parse?

fn Keyword:prototype.can_parse?([{type}]) = this == type

fn Set:prototype.can_parse?(tokens) =
  this.any?(|cond| cond.can_parse?(tokens))

fn _.can_parse?([]) = true

fn Array:prototype.can_parse?(tokens)
  if this.len() > tokens.len()
    return false
  else
    return this.zip(tokens).all?(|[pattern token]| pattern.can_parse?([token]))
  end
end

fn Optional(@parse_cond, @parse_fn, @as) end
fn Optional:prototype.parse([expr tokens])
  if tokens.empty?()
    return [expr tokens]
  else if this:parse_cond.can_parse?(tokens)
    return Then[this.:parse_fn, this.:as].parse([expr tokens])
  else
    return [expr tokens]
  end
end

fn Function:prototype.parse([_expr tokens]) = this(tokens)

fn Chomp(...@kws) end
fn Chomp:prototype.parse([expr tokens])
  let i = 0
  for kw of this:kws
    expect_token!(tokens:skip(i), kw)
    i = i + 1
  end
  return [expr, tokens:skip(i)]
end

fn Then(@parser, @kw) end
fn Then:prototype.parse([expr tokens])
  if let [new_expr new_tokens] = this:parser(tokens)
    if this:kw
      return [{...expr, this:kw => new_expr} new_tokens]
    else
      return [new_expr new_tokens]
    end
  else
    return [expr tokens]
  end
end

fn FMap(@f) end
fn FMap:prototype.parse([expr tokens]) = [this:f(expr) tokens]

fn Until(@end_kw, @parser, @kw) end
fn Until:prototype.parse([expr tokens])
  let exprs = []
  while tokens.first().at(:type) != this:end_kw
    let [expr new_tokens] = verify_exists!(this:parser(tokens) this)
    exprs.:push(expr)
    tokens = new_tokens
  end
  if this:kw
    return [{...expr this:kw => exprs} tokens]
  else
    return [exprs, tokens]
  end
end

fn UntilEither(@set, @parser, @kw) end
fn UntilEither:prototype.parse([expr tokens])
  let exprs = []
  while !tokens.first().at(:type).pipe(this:set)
    let [expr new_tokens] = verify_exists!(this:parser(tokens) this)
    exprs:push(expr)
    tokens = new_tokens
  end
  return [{...expr, this:kw => exprs} tokens]
end

fn Case(@parse_map, @kw) end
fn Case:prototype.parse([expr tokens])
  if let [new_expr, new_tokens] = this:parse_map(tokens)
    if this:kw
      return [{...expr, this:kw => new_expr}, new_tokens]
    else
      return [new_expr new_tokens]
    end
  else
    console.log(this:tokens.first(), this:parse_map)
    panic!("Case Parse Failed")
  end
end

fn Either(@set, @kw) end
fn Either:prototype.parse([expr tokens])
  let op = verify_exists!(this:set(tokens.first().at(:type)), this:set)
  let [new_expr, rest] = [tokens.first(), tokens:skip(1)]
  return [{...expr this:kw => new_expr.at(:value)}, rest]
end

fn Parser(...@instructions) end
fn Parser:prototype.invoke(tokens) = this.parse([nil tokens])

fn AbortIf(@cond_fn) end

fn Parser:prototype.parse(result)
  for instruction of this:instructions
    if instruction.is_a?(AbortIf)
      if instruction:cond_fn(result)
        return
      else
        continue
      end
    end
    result = instruction.parse(result)
  end
  return result
end

fn ParseMap(@entries) end

fn ParseMap:prototype.(Record:keys) =
  this:entries.map(|[pattern _]| pattern).into(Set[])

fn ParseMap:prototype.invoke(tokens, ...args)
  if tokens.empty?()
    return
  else
    for [pattern parser] of this:entries
      if pattern.can_parse?(tokens)
        return parser(tokens, ...args)
      end
    end
  end
end

let algebra_ops = Set[:mod :plus :minus :times :pow :div :lt :gt :lt_eq :gt_eq]

fn parse_dot(tokens, lhs) = Parser[
  Init[{type: :dot, lhs: lhs}]
  Chomp[:dot]
  Then[parse_single_expr :rhs]
](tokens)

fn parse_keyword_lookup(tokens, lhs) = Parser[
  AbortIf[not_adjacent?]
  Init[{type: :keyword_lookup, lhs: lhs}]
  One[:keyword :property]
  FMap[|{lhs, type, property}| {lhs: lhs, type: type, property: property:slice(1)}]
](tokens)

fn not_adjacent?([_expr tokens])
  let current = tokens.first()
  let previous = tokens.at(-1)
  if current:line != previous:line
    return true
  else
    let end_of_prev_token = previous:col + previous:value:length
    return (current:col - end_of_prev_token) >= 1
  end
end

fn parse_adjacent_expr(tokens) = Parser[
  AbortIf[not_adjacent?]
  Then[parse_expr]
](tokens)

fn parse_inclusive_range(tokens lhs) = Parser[
  AbortIf[not_adjacent?]
  Init[{type: :inclusive_range, lhs: lhs}]
  Chomp[:dot_dot :eq]
  Optional[SINGLE_EXPR_PARSE_MAP.keys() parse_adjacent_expr :rhs]
](tokens)

fn parse_exclusive_range(tokens lhs) = Parser[
  AbortIf[not_adjacent?]
  Init[{type: :exclusive_range, lhs: lhs}]
  Chomp[:dot_dot]
  Optional[SINGLE_EXPR_PARSE_MAP.keys() parse_adjacent_expr :rhs]
](tokens)

fn parse_fn_call(tokens lhs) = Parser[
  AbortIf[not_adjacent?]
  Init[{type: :fn_call, lhs: lhs}]
  Chomp[:open_p]
  Until[:close_p parse_expr :args]
  Chomp[:close_p]
](tokens)

fn parse_meta_from_entries(tokens lhs) = Parser[
  AbortIf[not_adjacent?]
  Init[{type: :meta_from_entries, lhs: lhs}]
  Chomp[:open_b]
  Until[:close_b parse_record_entry :entries]
  Chomp[:close_b]
](tokens lhs)

fn parse_meta_create(tokens lhs) = Parser[
  AbortIf[not_adjacent?]
  Init[{type: :meta_create, lhs: lhs}]
  Chomp[:open_sq]
  Until[:close_sq parse_expr :entries]
  Chomp[:close_sq]
](tokens lhs)

fn parse_snd_assign(tokens lhs) = Parser[
  Init[{type: :snd_assign, lhs: lhs}]
  Chomp[:eq]
  Then[parse_expr :rhs]
](tokens)

fn parse_snd_expr_step(tokens, lhs) = ParseMap{
  :open_p => parse_fn_call
  :open_b => parse_meta_from_entries
  :open_sq => parse_meta_create
  :dot => parse_dot
  :keyword => parse_keyword_lookup
  [:dot_dot :eq] => parse_inclusive_range
  :dot_dot => parse_exclusive_range
}(tokens, lhs)

fn parse_snd_expr([lhs tokens])  
  while let [new_lhs rest] = parse_snd_expr_step(tokens, lhs)
    lhs = new_lhs
    tokens = rest
  end
  return [lhs tokens]
end

fn parse_algebra_op(tokens, lhs) = Parser[
  Init[{type: :algebra_op, lhs: lhs}]
  Either[algebra_ops :op]
  Then[parse_1_2_expr :rhs]
](tokens)

fn parse_third_expr_step(tokens, lhs) = ParseMap{
  :eq => parse_snd_assign
  algebra_ops => parse_algebra_op  
}(tokens, lhs)

fn parse_third_expr([lhs tokens])
   while let [new_lhs rest] = parse_third_expr_step(tokens, lhs)
    lhs = new_lhs
    tokens = rest
  end
  return [lhs tokens]
end

let equality_ops = Set[:double_eq :not_eq]

fn parse_eq_op(tokens, lhs) = Parser[
  Init[{type: :equality_op, lhs: lhs}]
  Either[equality_ops :op]
  Then[parse_1_2_3_expr :rhs]
](tokens)

fn parse_fourth_expr_step(tokens, lhs) = ParseMap{
  equality_ops => parse_eq_op
}(tokens, lhs)

fn parse_fourth_expr([lhs tokens])
   while let [new_lhs rest] = parse_fourth_expr_step(tokens, lhs)
    lhs = new_lhs
    tokens = rest
  end
  return [lhs tokens]
end

fn parse_and(tokens lhs) = Parser[
  Init[{type: :and, lhs: lhs}]
  Chomp[:and]
  Then[parse_1_2_3_4_expr :rhs]
](tokens)

fn parse_or(tokens lhs) = Parser[
  Init[{type: :or, lhs: lhs}]
  Chomp[:or]
  Then[parse_1_2_3_4_expr :rhs]
](tokens)

fn parse_fifth_expr_step(tokens, lhs) = ParseMap{
  :and => parse_and
  :or => parse_or
}(tokens, lhs)

fn parse_fifth_expr([lhs tokens])
   while let [new_lhs rest] = parse_fifth_expr_step(tokens, lhs)
    lhs = new_lhs
    tokens = rest
  end
  return [lhs tokens]
end

let parse_regex = Parser[
  Init[{type: :regex_lit}]
  One[:regex_lit :value]
]

let parse_str = Parser[
  Init[{type: :str}]
  One[:string_lit :value]
]

let valid_ids_in_all_contexts = Set[:id :from]

let parse_id = Parser[
  Init[{type: :id_lookup}]
  Either[Set[...valid_ids_in_all_contexts :import] :name]
]

fn parse_obj(tokens) = Parser[
  Init[{type: :object_literal}]
  Chomp[:open_b]
  Until[:close_b parse_record_entry :entries]
  Chomp[:close_b]
](tokens)

let parse_spread_assign = Parser[
  Init[{type: :spread_assign}]
  Chomp[:dot_dot_dot]
  Either[valid_ids_in_all_contexts :name]
]

let parse_assign_id = Parser[
  Init[{type: :id_assign}]
  Either[valid_ids_in_all_contexts :name]
]

fn parse_assign_array(tokens) = Parser[
  Init[{type: :array_deconstruction}]
  Chomp[:open_sq]
  Until[:close_sq parse_assign_expr :entries]
  Chomp[:close_sq]
](tokens)

let parse_obj_entry_rename = Parser[
  Init[{type: :obj_entry_rename}]
  Either[valid_ids_in_all_contexts :old_name]
  Chomp[:colon]
  Either[valid_ids_in_all_contexts :new_name]
]

let parse_regular_obj_assign_entry = Parser[
  Init[{type: :obj_reg_entry}]
  Either[valid_ids_in_all_contexts :name]
]

fn parse_obj_entry_destructure(tokens) = Parser[
  Init[{type: :obj_assign_expr}]
  Either[valid_ids_in_all_contexts :property]
  Chomp[:colon]
  Then[parse_assign_expr :assign_expr]
](tokens)

let parse_obj_assign_entry = ParseMap{
  [:id :colon :id] => parse_obj_entry_rename
  [:id :colon] => parse_obj_entry_destructure
  :id => parse_regular_obj_assign_entry
  :dot_dot_dot => parse_spread_assign
}

let parse_assign_obj = Parser[
  Init[{type: :object_deconstruction}]
  Chomp[:open_b]
  Until[:close_b parse_obj_assign_entry :entries]
  Chomp[:close_b]
]

let parse_this_assign = Parser[
  Init[{type: :this_assign}]
  Chomp[:at]
  Either[valid_ids_in_all_contexts :name]
]

let parse_this_spread_assign = Parser[
  Init[{type: :this_spread_assign}]
  Chomp[:dot_dot_dot :at]
  One[:id :name]
]

let parse_assign_expr = ParseMap{
  :id => parse_assign_id
  :open_sq => parse_assign_array
  :open_b => parse_assign_obj
  :at => parse_this_assign
  [:dot_dot_dot :at] => parse_this_spread_assign
  :dot_dot_dot => parse_spread_assign
}

fn parse_paren_expr(tokens) = Parser[
  Init[{type: :paren_expr}]
  Chomp[:open_p]
  Then[parse_expr :expr]
  Chomp[:close_p]
](tokens)

fn parse_yield(tokens) = Parser[
  Init[{type: :yield}]
  Chomp[:yield]
  Optional[:times parse_gen_modifier :star?]
  Then[parse_expr :expr]
](tokens)

fn parse_await(tokens) = Parser[
  Init[{type: :await}]
  Chomp[:await]
  Then[parse_expr :expr]
](tokens)

let parse_num = Parser[Init[{type: :num}] One[:num :value]]

fn parse_array(tokens) = Parser[
  Init[{type: :array}]
  Chomp[:open_sq]
  Until[:close_sq parse_expr :elements]
  Chomp[:close_sq]
](tokens)

fn parse_spread(tokens) = Parser[
  Init[{type: :spread}]
  Chomp[:dot_dot_dot]
  Then[parse_expr :expr]
](tokens)

fn parse_not(tokens) = Parser[
  Init[{type: :not}]
  Chomp[:bang]
  Then[parse_expr :expr]
](tokens)

let parse_async_modifier = Parser[
  Init[{}]
  Chomp[:async]
]

let parse_gen_modifier = Parser[
  AbortIf[not_adjacent?]
  Init[{}]
  Chomp[:times]
]

fn parse_fn_expr_body(tokens) = Parser[
  Init[{type: :return}]
  Chomp[:eq]
  Then[parse_expr :expr]
  FMap[|node| [node]]
](tokens)

fn parse_args_def(tokens) = Parser[
  Chomp[:open_p]
  Until[:close_p parse_assign_expr]
  Chomp[:close_p]
](tokens)

fn parse_name_expr(tokens)
  if let [expr tokens] = parse_single_expr(tokens)
    let parse_map = ParseMap{
      :dot => parse_dot
      :keyword => parse_keyword_lookup
    }
    while let [new_expr new_tokens] = parse_map(tokens expr)
      expr = new_expr
      tokens = new_tokens
    end
    return [expr tokens]
  end
end

fn parse_fn(tokens) = Parser[
  Init[{type: :fn}]
  Optional[:async parse_async_modifier :is_async?]
  Chomp[:fn]
  Optional[:times parse_gen_modifier :generator?]
  Then[parse_name_expr :name_expr]
  Optional[:open_p parse_args_def :args]
  Case[ParseMap{
    :eq => parse_fn_expr_body,
    _ => block()
  } :body]
](tokens)

fn parse_keyword_record_entry(tokens) = Parser[
  Init[{type: :keyword_record_entry}]
  One[:id :name]
  Chomp[:colon]
  Then[parse_expr :expr]
](tokens)

fn parse_regular_record_entry(tokens) = Parser[
  Init[{type: :regular_record_entry}]
  Then[parse_expr :key_expr]
  Chomp[:arrow]
  Then[parse_expr :value_expr]
](tokens)

fn parse_record_entry(tokens) = ParseMap{
  :dot_dot_dot => parse_spread
  [:id :colon] => parse_keyword_record_entry
  [:id :arrow] => parse_regular_record_entry
  :fn => parse_fn
  [:async :fn] => parse_fn
  _ => parse_regular_record_entry
}(tokens)

fn parse_prefix_inclusive_range(tokens) = Parser[
  Init[{type: :prefix_inclusive_range}]
  Chomp[:dot_dot :eq]
  Then[parse_expr :expr]
](tokens)

fn parse_prefix_exclusive_range(tokens) = Parser[
  Init[{type: :prefix_exclusive_range}]
  Chomp[:dot_dot]
  Then[parse_expr :expr]
](tokens)

fn parse_keyword(tokens) = Parser[
  Init[{type: :keyword}]
  One[:keyword :value]
  FMap[|{type, value}| {type: type, value: value:slice(1)}]
](tokens)

fn parse_anon_fn(tokens) = Parser[
  Init[{type: :anon_fn}]
  Chomp[:pipe_bar]
  Until[:pipe_bar parse_assign_expr :args]
  Chomp[:pipe_bar]
  Then[parse_expr :return_expr]
](tokens)

fn parse_anon_body_fn(tokens) = Parser[
  Init[{type: :anon_body_fn}]
  Chomp[:do :pipe_bar]
  Until[:pipe_bar parse_assign_expr :args]
  Chomp[:pipe_bar]
  Then[block() :body]
](tokens)

let parse_unapplied_algebra_op = Parser[
  Init[{type: :unapplied_algebra_op}]
  Either[algebra_ops :op]
]

let parse_unapplied_equality_op = Parser[
  Init[{type: :unapplied_equality_op}]
  Either[equality_ops :op]
]

let SINGLE_EXPR_PARSE_MAP = ParseMap{
  :string_lit => parse_str
  :regex_lit => parse_regex
  :keyword => parse_keyword
  :open_p => parse_paren_expr
  :yield => parse_yield
  :await => parse_await
  :num => parse_num
  :open_sq => parse_array
  :dot_dot_dot => parse_spread
  :bang => parse_not
  :open_b => parse_obj
  :pipe_bar => parse_anon_fn
  :do => parse_anon_body_fn
  [:dot_dot :eq] => parse_prefix_inclusive_range
  :dot_dot => parse_prefix_exclusive_range
  Set[...valid_ids_in_all_contexts :import] => parse_id
  [:async :fn] => parse_fn
  :fn => parse_fn
  equality_ops => parse_unapplied_equality_op
  algebra_ops => parse_unapplied_algebra_op
}

fn parse_single_expr(tokens) = SINGLE_EXPR_PARSE_MAP(tokens)

fn parse_expr(tokens) = parse_fifth_expr(parse_fourth_expr(parse_third_expr(parse_snd_expr(parse_single_expr(tokens)))))

fn parse_1_2_expr(tokens) = parse_snd_expr(parse_single_expr(tokens))

fn parse_1_2_3_expr(tokens) = parse_third_expr(parse_snd_expr(parse_single_expr(tokens)))

fn parse_1_2_3_4_expr(tokens) = parse_fourth_expr(parse_third_expr(parse_snd_expr(parse_single_expr(tokens))))

fn parse_else_branch(tokens) = Parser[
  Init[{type: :else}]  
  Chomp[:else]
  UntilEither[Set[:else :end] parse_statement :body]
](tokens)

fn parse_else_if_branch(tokens) = Parser[
  Init[{type: :else_if}]
  Chomp[:else :if]
  Then[parse_expr :expr]
  UntilEither[Set[:else :end] parse_statement :pass]
  Optional[:else parse_if_branch :fail]
](tokens)

let parse_if_branch = ParseMap{
  [:else :if] => parse_else_if_branch
  :else => parse_else_branch
}

fn parse_if(tokens) = Parser[
  Init[{type: :if}]
  Chomp[:if]
  Then[parse_expr :expr]
  UntilEither[Set[:else :end] parse_statement :pass]
  Optional[:else parse_if_branch :fail]
  Chomp[:end]
](tokens)

let parse_let = Parser[
  Init[{type: :let}]
  Chomp[:let]
  Then[parse_assign_expr :assign_expr]
  Chomp[:eq]
  Then[parse_expr :rhs]
]

fn parse_if_let(tokens) = Parser[
  Init[{type: :if_let}]
  Chomp[:if :let]
  Then[parse_assign_expr :assign_expr]
  Chomp[:eq]
  Then[parse_expr :expr]
  UntilEither[Set[:else :end] parse_statement :pass]
  Optional[:else parse_else_branch :fail]
  Chomp[:end]
](tokens)

let parse_protocol_methods = Parser[
  Init[{type: :protocol_method}]  
  Chomp[:open_b]
  Until[:close_b parse_id :names]
  Chomp[:close_b]
]

let parse_protocol = Parser[
  Init[{type: :protocol_def}]
  Chomp[:protocol]
  One[:id :name]
  Optional[:open_b parse_protocol_methods :methods]
]

let parse_return = Parser[
  Init[{type: :return}]
  Chomp[:return]
  Optional[SINGLE_EXPR_PARSE_MAP.keys() parse_expr :expr]
]

let parse_await_modifier = Parser[
  Init[{}]
  Chomp[:await]
]

fn parse_for_loop(tokens) = Parser[
  Init[{type: :for_loop}]
  Chomp[:for]
  Optional[:await parse_await_modifier :is_await?]
  Then[parse_assign_expr :assign_expr]
  Chomp[:of]
  Then[parse_expr :iterable_expr]
  block(:body)
](tokens)

fn parse_loop(tokens) = Parser[
  Init[{type: :loop}]
  Chomp[:loop]
  block(:body)
](tokens)

fn parse_while_loop(tokens) = Parser[
  Init[{type: :while_loop}]
  Chomp[:while]
  Then[parse_expr :test_expr]
  block(:body)
](tokens)

fn parse_while_let_loop(tokens) = Parser[
  Init[{type: :while_let_loop}]
  Chomp[:while :let]
  Then[parse_assign_expr :assign_expr]
  Chomp[:eq]
  Then[parse_expr :test_expr]
  block(:body)
](tokens)

fn parse_continue(tokens) = Parser[
  Init[{type: :continue}]
  Chomp[:continue]
](tokens)

fn parse_break(tokens) = Parser[
  Init[{type: :break}]
  Chomp[:break]
](tokens)

fn parse_catch(tokens) = Parser[
  Init[{type: :catch}]
  Chomp[:catch]
  One[:id :name]
  block(:body)
](tokens)

fn parse_finally(tokens) = Parser[
  Init[{type: :finally}]
  Chomp[:finally]
  block(:body)
](tokens)

fn parse_try(tokens) = Parser[
  Init[{type: :try}]
  Chomp[:try]
  block(:body)
  Optional[:catch parse_catch :catch]
  Optional[:finally parse_finally :finally]
](tokens)

fn parse_import(tokens) = Parser[
  Init[{type: :import}]
  Chomp[:import]
  Then[parse_assign_expr :assign_expr]
  Chomp[:from]
  Then[parse_str :path]
](tokens)

fn parse_export(tokens) = Parser[
  Init[{type: :export}]
  Chomp[:export]
  Then[parse_statement :statement]
](tokens)

fn parse_export_default(tokens) = Parser[
  Init[{type: :export_default}]
  Chomp[:export :default]
  Then[parse_expr :expr]
](tokens)

let parse_direct_import = Parser[
  Init[{type: :direct_import}]
  Chomp[:import]
  One[:string_lit :path]
]

fn parse_statement(tokens) = ParseMap{
  :let => parse_let
  :for => parse_for_loop
  :try => parse_try
  :protocol => parse_protocol
  :return => parse_return
  :continue => parse_continue
  :break => parse_break
  :loop => parse_loop
  [:import :string_lit] => parse_direct_import
  :import => parse_import
  [:export :default] => parse_export_default
  :export => parse_export
  [:while :let] => parse_while_let_loop
  :while => parse_while_loop
  [:if :let] => parse_if_let
  :if => parse_if
  _ => parse_expr
}(tokens)

fn block(name) = Parser[
  Until[:end parse_statement name]
  Chomp[:end]
]

fn parse_tokens(tokens)
  let ast = []
  while let [statement_or_expr, rest] = parse_statement(tokens)
    ast:push(statement_or_expr)
    tokens = rest
  end
  return ast
end

export default parse_tokens