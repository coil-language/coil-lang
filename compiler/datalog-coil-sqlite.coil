import { DB } from "https://deno.land/x/sqlite/mod.ts"
def str(...args) = args.map(|arg| arg:toString()).join("")

let db = DB["test.db"]

protocol insert

def Fact(@name, @entries) end
def Predicate(@name, @body) end

let ? = Proxy[{} {def :get(_ name) = {
  def Meta:from_entries(entries) = Fact[name entries]
  def Meta:create(body) = Predicate[name body]
}}]

def Fact:prototype.insert(db)
  def type(value) = typeof(value).pipe(Map{
    "number" => "INTEGER"
  })
  db:execute(str(
    "CREATE TABLE IF NOT EXISTS " this:name "_fact ("
      "id INTEGER PRIMARY_KEY,"
      this:entires
        .map(|[name value]| str(name " " type(value)))
        .join(",\n")
    ");"
  ))
  db:query(str(
    "INSERT INTO " this:name
      "(" this:entries.map(0).join(", ") ")"
      "VALUES (" this:entries.map(|_| "?").join(", ") ")";
  ), this:entries.map(1).into([]))
end

?:edge{x: 1, y: 2}.insert(db)
?:edge{x: 2, y: 3}.insert(db)

?:path[|{x y}| ?:edge{x: x, y: y}].insert(db)

?:path[|{x y}| [
  ?:edge{x: x, y: ?:z}
  ?:edge{x: ?:z, y: y}]].insert(db)

?:edge{x: 1, y: 3}
  .search(db)

db:close()
