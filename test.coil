let Model = ~Struct["Model" :name :options]

impl Validation for Model = {
  // why doesn't this work??? >:(
  options: _::at(:mapping)::all?(fn(_key value) = Invertable keyof value)
}

protocol Invertable

// opposite of looking up a keyword is inserting it into a record
impl Invertable for Keyword = fn(output, new_value) = 
  output::insert(this, new_value)

// opposite of looking up a keyword is inserting it into a record
impl Invertable for Number = fn(output, new_value) = 
  output::insert(this, new_value)

// inverse of :age _::at(:person)::at(:my_age) is:
//            {...output, person: {my_age: new_value}}
// that is    output::insert(:person ::insert(:my_age new_value))
// so we reverse the operations & replace at with update.
// there's a lot to do here, but it should be possible
// let InvertableCollectionApis = {
//   // output, update_fn, ...fn_args
//   at(output, update_fn, key) = output::update(key, update_fn)
// }

fn invert(...args) = this[Invertable](...args)

impl Model = {
  data: null
  fn load(data) {
    // TODO: something is wrong with ~Struct here I think.
    // I can't seem to do this::clone() and retain being a `Model`
    let output = new Model(this.name, this.options)
    let {mapping, schema} = this.options
    output.data = {}
    for [key map_fn] of mapping {
      output.data[key] = map_fn::call(data)
      // use something like StructValidationError here instead.
      // In general this assert! keyword is poorly thought out
      // maybe needs to be removed
      if key keyof schema {
        assert! schema::at(key)::call(output.data[key])
      }
    }
    return output
  }
  fn unload() {
    let {mapping, schema} = this.options
    let output = {}
    for [key mapper] of mapping {
      if key keyof schema {  
        assert! schema[key]::call(this.data[key])
      }
      output = mapper::invert(output, this.data[key])
    }
    return output
  }
}

let Lookup = ~DefVector[_ :keys]

impl Call for Lookup = fn(obj) =
  this.keys::reduce(fn(result, kw) = result::at(kw), obj)

// inverse of :age _::at(:person)::at(:my_age) is:
//            {...output, person: {my_age: new_value}}
// that is    output::insert(:person ::insert(:my_age new_value))
// This breaks at ~Lookup[:age] - that is, it breaks when
// there is only one key in this.keys
impl Invertable for Lookup = fn(output, value) {
  // this is a mess, but it kind of works??
  let reversed_keys = this.keys::reverse()
  let [all_but_last last_kw] = [reversed_keys::skip(1) reversed_keys::first()]
  let obj = {[last_kw]: value}
  let i = 1
  fn get_obj_at(i) {
    // I don't get how this works..
    let result = output  
    for [_ key] of (0...i)::zip(this.keys) {
      result = result::at(key)
    }
    return result || {}
  }
  for key of all_but_last {
    obj = {[key]: this::get_obj_at(i)::merge(obj)}
    i += 1
  }
  return obj
}

// what if compose stored the functions instead of combining them right away
// kind of like Underscore
// it would mean we could use compose(:user :id) in
// these mappings & as long as each step was reversable..
// it should be possible?
// idk
// The other thing is reading compose(:user :id)
// is pretty meaningless because that word has been
// overloaded so many times

let Point = ~Struct["Point" :x :y]

let Construct = ~DefVector[:ctor _ :entries]

impl Symbol.iterator for Construct = fn*() {
  let i = 0
  let prev = null
  for elem of this.entries {
    i += 1
    if i::odd?() {
      prev = elem  
      continue
    }
    yield [prev elem]
  }
}

impl Call for Construct = fn(data) {
  let args = []
  for [_arg_name, mapper] of this {
    args.push(mapper::call(data))
  }
  let Ctor = this.ctor
  return new Ctor(...args)
}

impl Invertable for Construct = fn(output, value) {
  for [prop mapper] of this {
    output = mapper::invert(output, value[prop])
  }
  return output
}

let Post = new Model("Post" {
  mapping: {
    // id: ~Lookup[:user :id]
    // title: ~Lookup[:user :title]
    point: ~Construct[Point
      :x :point_x
      :y :point_y
    ]
    // age: :age
  }
  schema: {
    // id: _
    // title: _::len() < 100
  }
})

let my_post = Post.load({point_x: 10, point_y: 20})::log()
// the compiler is broken.. these lets are necessary for some reason
let d = 3
my_post.data.point.x += 20
// the compiler is broken..
let b = 10
my_post.unload()::log()
