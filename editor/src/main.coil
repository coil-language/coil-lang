import {parse} from "./parsing_utils.coil"
import eval_ast from "@coil-lang/compiler/src/emit.coil"
import {render} from "./ui.coil"

protocol to_html

array.map:async(|item| item + 1)

fn ObjectLiteral:prototype.to_html()
  console:log(this)
  let elem = :div{"data-type" => this:type}
  this:type.to_html(this)
  # elem:appendChild(...)
  return [elem]
end

fn Array:prototype.to_html() =
  this:map(|node| node.to_html())

fn Keyword:prototype.to_html(node)
  let out = []
  let ignored_attrs = Set["type" "pos"]
  for [name value] of node
    if ignored_attrs.has?(name)
      continue
    else
      console:log(name value)
      let elem = :div{"data-attr" => name}
      value.to_html().log
      # elem:appendChild(...)
      out:push(elem)
    end
  end
  return out
end

let ast = parse("let a = 10")
  .to_html()