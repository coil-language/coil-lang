export protocol render

export fn Elem(@ctor, @attrs, @children) end

fn Elem:prototype.(Meta:create)(children) =
  Elem[this:ctor this:attrs children]

fn Keyword:prototype.(Meta:create)(children) =
  Elem[this:value {} children]

fn Keyword:prototype.(Meta:from_entries)(entries)
  let attrs = ObjectLiteral[entries]
  return Elem[this:value, attrs, []]
end

fn HTMLElement:prototype.(Iter:collect)(elem) = 
  this:appendChild(elem.render())

fn Elem:prototype.render()
  let {ctor, attrs, children} = this
  let elem = document:createElement(ctor)
  for [name val] of attrs
    if name:startsWith("on")
      elem:addEventListener(name:slice(2), val.invoke)
    else
      elem:setAttribute(name, val)
    end
  end
  elem:append(...children.filter(_).map(|item| item.render()))
  return elem
end

fn String:prototype.render() = document:createTextNode(this)
