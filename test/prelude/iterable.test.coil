import { assertEquals } from "https://deno.land/std@0.179.0/testing/asserts.ts";

Deno.test("[1 2 3] map", fn () {
  let plus_one = [1 2 3]::iter()::map(_ + 1)::as_array()
  assertEquals(plus_one, [2 3 4])
})

Deno.test("[1 2 3] flat_map", fn () {
  let itself = [1 2 3]::iter()::flat_map(#([&]))::as_array()
  assertEquals(itself, [1 2 3])
})

Deno.test("[1 2 3] any?", fn () {
  let has_two? = [1 2 3]::iter()::any?(_ == 2)
  assertEquals(has_two?, true)
})

Deno.test("[1 2 3] all?", fn () {
  let less_than_4? = [1 2 3]::iter()::all?(_ < 4)
  assertEquals(less_than_4?, true)
})

Deno.test("[1 2 3] find first < 4", fn () {
  let one = [1 2 3]::iter()::find(_ < 4)
  assertEquals(one, 1)
})

Deno.test("[] empty?", fn() {
  assertEquals([]::empty?(), true)
  assertEquals([]::iter()::empty?(), true)
})

Deno.test("[1] empty?", fn() {
  assertEquals([1]::empty?(), false)
  assertEquals([1]::iter()::empty?(), false)
})

Deno.test("[]::push(1)", fn() {
  assertEquals([]::push(1), [1])
})

Deno.test("#{}::push(1)", fn() {
  assertEquals(#{}::push(1), #{1})
})

Deno.test("\"\"::push(\"a\")", fn() {
  assertEquals(""::push("a"), "a")
})

Deno.test("[1 2 3]::concat([2 3 4])", fn() {
  assertEquals([1 2 3]::concat([2 3 4]), [1 2 3 2 3 4])
})

Deno.test("#{1 2 3}::concat(#{2 3 4})", fn() {
  assertEquals(#{1 2 3}::concat(#{2 3 4}), #{1 2 3 2 3 4})
})

Deno.test("#{1 2 3}::concat([2 3 4])", fn() {
  assertEquals(#{1 2 3}::concat([2 3 4]), #{1 2 3 2 3 4})
})

Deno.test("{a: 2}::merge({a: 3})", fn() {
  assertEquals({a: 2}::merge({a: 3}), {a: 3})
})

Deno.test("{a: 2}::merge({b: 3})", fn() {
  assertEquals({a: 2}::merge({b: 3}), {a: 2, b: 3})
})

Deno.test("{a: 2}::merge(~Map{b: 3})", fn() {
  assertEquals({a: 2}::merge(~Map{b: 3}), {a: 2, b: 3})
})

Deno.test("{a: 2}::merge(~Map{a: 3})", fn() {
  assertEquals({a: 2}::merge(~Map{a: 3}), {a: 3})
})

Deno.test("~Map{a: 2}::merge(~Map{a: 3})", fn() {
  assertEquals(~Map{a: 2}::merge(~Map{a: 3}), ~Map{a: 3})
})

Deno.test("~Map{a: 2}::merge({a: 3})", fn() {
  assertEquals(~Map{a: 2}::merge({a: 3}), ~Map{a: 3})
})

Deno.test("~Map{a: 2}::merge(~Map{b: 3})", fn() {
  assertEquals(~Map{a: 2}::merge(~Map{b: 3}), ~Map{a: 2, b: 3})
})
